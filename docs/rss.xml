<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Fklightdog</title><link>https://Fklightdog.github.io</link><description>大三学生，目前学习C++和Go</description><copyright>Fklightdog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://Fklightdog.github.io</link></image><lastBuildDate>Thu, 19 Sep 2024 09:12:49 +0000</lastBuildDate><managingEditor>Fklightdog</managingEditor><ttl>60</ttl><webMaster>Fklightdog</webMaster><item><title>asio网络编程(1) socket的创建和连接</title><link>https://Fklightdog.github.io/post/asio-wang-luo-bian-cheng-%281%29%20socket-de-chuang-jian-he-lian-jie.html</link><description>本文是学习[恋恋风辰Zack](https://space.bilibili.com/271469206)asio网络编程的学习记录&#13;
## socket的监听和连接&#13;
### 网络编程&#13;
&#13;
&lt;p align='center'&gt;&#13;
  &lt;img src='https://cdn.llfc.club/1540562-20190417002428451-62583604.jpg' alt='图片描述'&gt;&#13;
  &lt;br&gt;&#13;
  网络编程流程图&#13;
&lt;/p&gt;&#13;
&#13;
对于服务器而言，流程如下：&#13;
* socket() --创建服务器套接字&#13;
* bind() --连接IP和端口号&#13;
* listen() --使套接字处于监听模式，使其准备接受来自客户端的连接&#13;
* accept() -- 如果传入连接的请求队列不为空，就从队列中取出一个连接请求，创建一个新的套接字，与客户端进行连接&#13;
&#13;
对于客户端而言，流程如下：&#13;
* socket() --创建客户端套接字&#13;
* connect() -- 与服务器进行连接&#13;
&#13;
两者共有的有：&#13;
* write() --进行写入操作&#13;
* read() --进行读取操作&#13;
&#13;
&#13;
### 终端节点的构造&#13;
在使用asio库进行网络编程的时候，我们应该优先构造终端节点，因为终端节点定义了网络通信的来源和目标，其包含了目标的ip和端口号。</description><guid isPermaLink="true">https://Fklightdog.github.io/post/asio-wang-luo-bian-cheng-%281%29%20socket-de-chuang-jian-he-lian-jie.html</guid><pubDate>Thu, 19 Sep 2024 09:12:23 +0000</pubDate></item><item><title>Learn the ways of Linux-fu，for free -- Permissions</title><link>https://Fklightdog.github.io/post/Learn%20the%20ways%20of%20Linux-fu%EF%BC%8Cfor%20free%20--%20Permissions.html</link><description>该文章为学习[*Learn the ways of Linux-fu，for free*](https://linuxjourney.com/)的记录，本文为*Permissions*&#13;
### 文件权限&#13;
对于Linux系统而言，每个文件都有自己的权限&#13;
```bash&#13;
$ ls -l Desktop/&#13;
drwxr-xr-x 2 pete penguins 4096 Dec 1 11:45 .&#13;
```&#13;
上述中的drwxr-xr-x为权限描述符，开头的d表示这是一个文件夹，而其他文件会以-开头，除了开头字母以为，其他元素以3bits来进行分割，如下&#13;
`d|rwx|r-x|r-x`&#13;
对于第一个3bits组而言表示的是个人权限，其次为小组权限，最后为其他用户的权限&#13;
对于上述的每个字符的含义如下：&#13;
&#13;
- r:代表可读权限&#13;
- w：代表可写权限&#13;
- x：代表可执行权限&#13;
&#13;
### 修改权限&#13;
我们可以使用 **chmod** 语句进行权限的修改，我们可以用 **+** 或者 **-** 号进行权限的增加和删除，下面为例子：&#13;
```bash&#13;
$ chmod u+x a.txt&#13;
$ chmod u-w a.txt&#13;
```&#13;
其中u表示user&#13;
除此之外我们也可以利用数字来进行修改，利用数字我们可以一口气把所有权限都进行修改，包括：用户权限、组权限和其他用户的权限。</description><guid isPermaLink="true">https://Fklightdog.github.io/post/Learn%20the%20ways%20of%20Linux-fu%EF%BC%8Cfor%20free%20--%20Permissions.html</guid><pubDate>Sun, 15 Sep 2024 13:11:58 +0000</pubDate></item><item><title>Text</title><link>https://Fklightdog.github.io/post/Text.html</link><description>Hello World。</description><guid isPermaLink="true">https://Fklightdog.github.io/post/Text.html</guid><pubDate>Fri, 13 Sep 2024 06:54:53 +0000</pubDate></item></channel></rss>